imported-capabilities:
  - reference-id: CCC
    entries:
      - reference-id: CCC.Core.CP03
        remarks: Access Log Publication
      - reference-id: CCC.Core.CP04
        remarks: Transaction Rate Limits
      - reference-id: CCC.Core.CP06
        remarks: Access Control
      - reference-id: CCC.Core.CP08
        remarks: Data Replication
      - reference-id: CCC.Core.CP09
        remarks: Metrics Publication
      - reference-id: CCC.Core.CP10
        remarks: Log Publication
      - reference-id: CCC.Core.CP14
        remarks: API Access
      - reference-id: CCC.Core.CP15
        remarks: Cost Management
      - reference-id: CCC.Core.CP16
        remarks: Budgeting
      - reference-id: CCC.Core.CP17
        remarks: Alerting
      - reference-id: CCC.Core.CP19
        remarks: Resource Scaling
      - reference-id: CCC.Core.CP20
        remarks: Resource Tagging
      - reference-id: CCC.Core.CP22
        remarks: Location Lock-In

capabilities:
  - id: CCC.LB.CP01
    title: Static Load Balancing
    description: |
      Employ load balancing algorithms that follow fixed rules,
      independent of the current server state.
  - id: CCC.LB.CP02
    title: Dynamic Load Balancing
    description: |
      Employ load balancing algorithms that consider the current state
      of servers before distributing traffic. Load balancer adjusts traffic
      distribution in real-time based on the current server health, resource
      utilization, and traffic conditions.
  - id: CCC.LB.CP03
    title: Layer 7 Routing
    description: |
      Providing distribution of incoming traffic based on the application layer
      or layer 7 (on ISO model) information. Some of the supported protocols on
      layer 7 are HTTP, HTTPS, HTTP/2, gRPC, and WebSockets.
  - id: CCC.LB.CP04
    title: Layer 4 Routing
    description: |
      Providing distribution of incoming traffic based on the
      transport layer or layer 4 (on ISO model) information. It uses
      the combination of IP addresses and TCP/UDP port to distribute incoming
      traffic rather than inspecting the actual content of the packets.
  - id: CCC.LB.CP05
    title: URL-Based Routing
    description: |
      Direct incoming requests to different backend resources based on
      the content of the request URL.
  - id: CCC.LB.CP06
    title: HTTP Header-Based Routing
    description: |
      Direct incoming requests to different backend resources based on
      the values of HTTP headers.
  - id: CCC.LB.CP07
    title: WebSocket Support
    description: |
      Ability to support web socket communication.
  - id: CCC.LB.CP08
    title: Dual-stack Load Balancing
    description: |
      Ability to support traffic originated from both IPv4 and IPv6.
  - id: CCC.LB.CP09
    title: Load Balancer Autoscaling
    description: |
      Ability for the load balancer to dynamically adjust its capacity
      in response to fluctuations in incoming traffic.
  - id: CCC.LB.CP10
    title: Target Autoscaling
    description: |
      Ability for the load balancer to trigger scaling actions of the
      backend instances (targets) to handle fluctuations in incoming traffic.
  - id: CCC.LB.CP11
    title: SSL/TLS Termination
    description: |
      Process of decrypting SSL or TLS encrypted traffic at the load balancer
      level rather than at the backend servers. This allows the load balancer
      to offload the decryption task from the backend servers.
  - id: CCC.LB.CP12
    title: Target Health Checks
    description: |
      Ability to continuously perform health checks on backend backend targets
      in form of checking the response to HTTP request, TCP connection or checking
      other application-specific parameter
  - id: CCC.LB.CP13
    title: Health Checks-based Target Removal
    description: |
      If the health check detects that a backend target is unhealthy
      the load balancer will remove that unhealthy target from its list
      of available backend instances. This ensures that traffic is no longer
      routed to the unhealthy target.
  - id: CCC.LB.CP14
    title: Retries
    description: |
      Ability to retry delivery of failed requests to targets. The conditions
      under which the load balancer retries, how long to wait before retrying,
      and the maximum number of retries permitted are configurable.
  - id: CCC.LB.CP15
    title: Session Affinity
    description: |
      Can configure subsequent requests from an initial client to be
      passed to the same target.
  - id: CCC.LB.CP16
    title: URL Redirects
    description: |
      Redirect incoming traffic to a different URL or location.
  - id: CCC.LB.CP17
    title: URL Rewrites
    description: |
      Rewrite URL paths before forwarding them to backend services.
  - id: CCC.LB.CP18
    title: Custom Response
    description: |
      Ability to configure specific HTTP responses to be returned by
      the load balancer under defined conditions.
  - id: CCC.LB.CP19
    title: Request and Response Header Transformations
    description: |
      Ability to modify HTTP headers of both incoming requests and outgoing
      responses.
  - id: CCC.LB.CP20
    title: Traffic Splitting / Weighted Routing
    description: |
      Can distribute incoming traffic across multiple backend resources
      based on predefined weights or percentages (e.g., for canary
      deployments, A/B testing, blue-green deployments, or gradual
      traffic migrations).
  - id: CCC.LB.CP21
    title: Traffic Mirroring
    description: |
      Can duplicate incoming network traffic and send it to a secondary
      destination for monitoring, analysis, or testing purposes.
  - id: CCC.LB.CP22
    title: Rate Limiting / Throttling
    description: |
      Ability to limit the number of requests per second per client. This
      ensures that no single client or user overloads the backend servers,
      distributing requests fairly across multiple instances.
  - id: CCC.LB.CP23
    title: Firewall Integration
    description: |
      Ability to seamlessly integrate with firewall services to ensure only
      legitimate and secure traffic reaches backend servers, blocking malicious
      requests.
