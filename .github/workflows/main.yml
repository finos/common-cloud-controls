name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      build_targets:
        description: 'List of Build Targets (comma-separated)'
        required: true
      tag:
        description: 'Tag for this release'
        required: true

jobs:

  # approval:
  #   runs-on: ubuntu-latest
  #   environment: approval-required
  #   steps:
  #     - name: Approval check
  #       run: echo "Approval granted, proceeding with build"

  build:
    #needs: approval
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./delivery-tooling
    steps:
      - uses: actions/checkout@v4
        name: Build
        with: 
          ref: release-pipeline-code

      - name: Configure Go
        uses: actions/setup-go@v5

      - name: Install dependencies
        run: go mod download
  
      - name: Get Build Targets
        id: process_targets
        run: |
          # Read the input
          input_targets="${{ github.event.inputs.build_targets }}"
          
          # Replace commas with spaces, then split on spaces
          targets_array=($(echo "$input_targets" | tr ',' ' '))
          
          # Convert to JSON array
          json_targets=$(printf '%s\n' "${targets_array[@]}" | jq -R . | jq -sc .)
          
          echo "Processed targets: $json_targets"
          echo "targets=$json_targets" >> $GITHUB_OUTPUT

      - name: Create Release Artifacts
        run: |
          echo "List of Build Targets: ${{ steps.process_targets.outputs.targets }}"        
          echo '${{ steps.process_targets.outputs.targets }}' | jq -r .[] | while read -r target; do
            echo "Creating Artifacts for: $target"
            go run . "yaml" --build-target $target
            go run . "md" --build-target $target
          done
      
      - name: Upload YAML Artifacts
        uses: actions/upload-artifact@v4.4.0
        with:
          name: yaml-catalogs
          path: ./delivery-tooling/artifacts/*.yaml
          if-no-files-found: error
          retention-days: 1 # Maximum Retention
  
      - name: Upload Markdown Artifacts
        uses: actions/upload-artifact@v4.4.0
        with:
          name: markdown-catalogs
          path: ./delivery-tooling/artifacts/*.md
          if-no-files-found: error
          retention-days: 1 # Maximum Retention

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download YAML Artifacts
        uses: actions/download-artifact@v4
        with:
          name: yaml-catalogs
          path: ./

      - name: Download Markdown Artifacts
        uses: actions/download-artifact@v4
        with:
          name: markdown-catalogs
          path: ./

      # Create a GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Release ${{ github.event.inputs.tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the artifacts to the release
      - name: Upload Release Assets - YAML
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./yaml-catalogs/*.yaml
          asset_name: yaml-catalogs-${{ github.event.inputs.tag }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets - Markdown
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./markdown-catalogs/*.md
          asset_name: markdown-catalogs-${{ github.event.inputs.tag }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
